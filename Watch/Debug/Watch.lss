
Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000c0  008000c0  000008ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000900  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001042  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000715  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000592  00000000  00000000  00002123  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000026b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000484  00000000  00000000  000028cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9a  00000000  00000000  00002d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000037ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ec       	ldi	r26, 0xC0	; 192
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3c       	cpi	r26, 0xC6	; 198
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 50 02 	call	0x4a0	; 0x4a0 <main>
  8a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z8Read2Nibv>:
}

void Write8Bit(uint8_t chr){
	DATA_O=chr;   //out 8 bits to DATA Line
	sbi(CTRL,EN); //enable
	cbi(CTRL,EN); //disable
  92:	8b b3       	in	r24, 0x1b	; 27
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	8b bb       	out	0x1b, r24	; 27
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	8f 70       	andi	r24, 0x0F	; 15
  9c:	8a bb       	out	0x1a, r24	; 26
  9e:	da 9a       	sbi	0x1b, 2	; 27
  a0:	da 9a       	sbi	0x1b, 2	; 27
  a2:	99 b3       	in	r25, 0x19	; 25
  a4:	da 98       	cbi	0x1b, 2	; 27
  a6:	da 9a       	sbi	0x1b, 2	; 27
  a8:	da 9a       	sbi	0x1b, 2	; 27
  aa:	29 b3       	in	r18, 0x19	; 25
  ac:	da 98       	cbi	0x1b, 2	; 27
  ae:	22 95       	swap	r18
  b0:	2f 70       	andi	r18, 0x0F	; 15
  b2:	89 2f       	mov	r24, r25
  b4:	80 7f       	andi	r24, 0xF0	; 240
  b6:	82 2b       	or	r24, r18
  b8:	08 95       	ret

000000ba <_Z9Write2Nibh>:
  ba:	2b b3       	in	r18, 0x1b	; 27
  bc:	2f 70       	andi	r18, 0x0F	; 15
  be:	98 2f       	mov	r25, r24
  c0:	90 7f       	andi	r25, 0xF0	; 240
  c2:	92 2b       	or	r25, r18
  c4:	9b bb       	out	0x1b, r25	; 27
  c6:	da 9a       	sbi	0x1b, 2	; 27
  c8:	da 98       	cbi	0x1b, 2	; 27
  ca:	30 e1       	ldi	r19, 0x10	; 16
  cc:	83 9f       	mul	r24, r19
  ce:	c0 01       	movw	r24, r0
  d0:	11 24       	eor	r1, r1
  d2:	82 2b       	or	r24, r18
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	da 9a       	sbi	0x1b, 2	; 27
  d8:	da 98       	cbi	0x1b, 2	; 27
  da:	08 95       	ret

000000dc <_Z8wait_LCDv>:
}

void wait_LCD(){
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	1f 92       	push	r1
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	cbi(CTRL,RW); //ready for next step
	DDR_DATA=0xFF;//Ready to Out
	#else
	char temp_val;
	while(1){
		cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
  e6:	d8 98       	cbi	0x1b, 0	; 27
		sbi(CTRL,RW); //the Direction of this COMMAND is from LCD -> chip
  e8:	d9 9a       	sbi	0x1b, 1	; 27
		temp_val=Read2Nib();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <_Z8Read2Nibv>
  ee:	89 83       	std	Y+1, r24	; 0x01
		if (bit_is_clear(temp_val,7)) break;
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 23       	and	r24, r24
  f4:	c4 f3       	brlt	.-16     	; 0xe6 <_Z8wait_LCDv+0xa>
	}
	cbi(CTRL,RW); //ready for next step
  f6:	d9 98       	cbi	0x1b, 1	; 27
	DDR_DATA=0xFF;//Ready to Out
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8a bb       	out	0x1a, r24	; 26
	#endif
	
	//_delay_ms(1);
	
}
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_Z8init_LCDv>:


void init_LCD(){
	DDR_CTRL=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a bb       	out	0x1a, r24	; 26
	DDR_DATA=0xFF;
 108:	8a bb       	out	0x1a, r24	; 26
	//Function set------------------------------------------------------------------------------
	cbi(CTRL,RS);   // the following data is COMMAND
 10a:	d8 98       	cbi	0x1b, 0	; 27
	cbi(CTRL, RW); // AVR->LCD
 10c:	d9 98       	cbi	0x1b, 1	; 27
	cbi(CTRL, EN);
 10e:	da 98       	cbi	0x1b, 2	; 27
	#ifdef LCD8BIT
	Write8Bit(0x38);
	wait_LCD();
	#else
	sbi(CTRL,EN); //enable
 110:	da 9a       	sbi	0x1b, 2	; 27
	sbi(DATA_O, 5);
 112:	dd 9a       	sbi	0x1b, 5	; 27
	cbi(CTRL,EN); //disable
 114:	da 98       	cbi	0x1b, 2	; 27
	wait_LCD();
 116:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
	Write2Nib(0x28);//
 11a:	88 e2       	ldi	r24, 0x28	; 40
 11c:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 120:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
	#endif
	//Display control-------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
 124:	d8 98       	cbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(0x0C);
	wait_LCD();
	#else
	Write2Nib(0x0C);
 126:	8c e0       	ldi	r24, 0x0C	; 12
 128:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
	#endif
	//Entry mode set------------------------------------------------------------------------
	cbi(CTRL,RS); // the following data is COMMAND
 130:	d8 98       	cbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(0x06);
	wait_LCD();
	#else
	Write2Nib(0x06);
 132:	86 e0       	ldi	r24, 0x06	; 6
 134:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 138:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
 13c:	08 95       	ret

0000013e <_Z8home_LCDv>:
	#endif
}

void home_LCD(){
	cbi(CTRL,RS); // the following data is COMMAND
 13e:	d8 98       	cbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(0x02);
	wait_LCD();
	#else
	Write2Nib(0x02);
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 146:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
 14a:	08 95       	ret

0000014c <_Z8move_LCDhh>:
	#endif
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
	cbi(CTRL,RS); // the following data is COMMAND
 14c:	d8 98       	cbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(Ad);
	wait_LCD();
	#else
	Write2Nib(Ad);
 14e:	90 e4       	ldi	r25, 0x40	; 64
 150:	89 9f       	mul	r24, r25
 152:	60 0d       	add	r22, r0
 154:	11 24       	eor	r1, r1
 156:	86 2f       	mov	r24, r22
 158:	81 5c       	subi	r24, 0xC1	; 193
 15a:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 15e:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
 162:	08 95       	ret

00000164 <_Z7clr_LCDv>:
	#endif
}

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
 164:	d8 98       	cbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(0x01);
	wait_LCD();
	#else
	Write2Nib(0x01);
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 16c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
 170:	08 95       	ret

00000172 <_Z11putChar_LCDh>:
	
	#endif
}

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA
 172:	d8 9a       	sbi	0x1b, 0	; 27
	#ifdef LCD8BIT
	Write8Bit(chr);
	wait_LCD();
	#else
	Write2Nib(chr);
 174:	0e 94 5d 00 	call	0xba	; 0xba <_Z9Write2Nibh>
	wait_LCD();
 178:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z8wait_LCDv>
 17c:	08 95       	ret

0000017e <_Z9print_LCDPc>:
	#endif
}

void print_LCD(char* str){
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	fc 01       	movw	r30, r24
	unsigned char i;
	for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);
 186:	80 81       	ld	r24, Z
 188:	88 23       	and	r24, r24
 18a:	59 f0       	breq	.+22     	; 0x1a2 <_Z9print_LCDPc+0x24>
 18c:	8f 01       	movw	r16, r30
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	0e 94 b9 00 	call	0x172	; 0x172 <_Z11putChar_LCDh>
 194:	cf 5f       	subi	r28, 0xFF	; 255
 196:	f8 01       	movw	r30, r16
 198:	ec 0f       	add	r30, r28
 19a:	f1 1d       	adc	r31, r1
 19c:	80 81       	ld	r24, Z
 19e:	81 11       	cpse	r24, r1
 1a0:	f7 cf       	rjmp	.-18     	; 0x190 <_Z9print_LCDPc+0x12>
}
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <_Z7get_daylll>:

long get_day(long  day,long  month, long year)
{
 1aa:	4f 92       	push	r4
 1ac:	5f 92       	push	r5
 1ae:	6f 92       	push	r6
 1b0:	7f 92       	push	r7
 1b2:	8f 92       	push	r8
 1b4:	9f 92       	push	r9
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	4b 01       	movw	r8, r22
 1c8:	5c 01       	movw	r10, r24
 1ca:	29 01       	movw	r4, r18
 1cc:	3a 01       	movw	r6, r20
	long   JMD;
	JMD = (day + ((153 * (month + 12 * ((14 - month) / 12) - 3) + 2) / 5) +
 1ce:	8e e0       	ldi	r24, 0x0E	; 14
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	bc 01       	movw	r22, r24
 1d8:	cd 01       	movw	r24, r26
 1da:	62 1b       	sub	r22, r18
 1dc:	73 0b       	sbc	r23, r19
 1de:	84 0b       	sbc	r24, r20
 1e0:	95 0b       	sbc	r25, r21
 1e2:	2c e0       	ldi	r18, 0x0C	; 12
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	50 e0       	ldi	r21, 0x00	; 0
 1ea:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
	(365 * (year + 4800 - ((14 - month) / 12))) +
 1ee:	d8 01       	movw	r26, r16
 1f0:	c7 01       	movw	r24, r14
 1f2:	80 54       	subi	r24, 0x40	; 64
 1f4:	9d 4e       	sbci	r25, 0xED	; 237
 1f6:	af 4f       	sbci	r26, 0xFF	; 255
 1f8:	bf 4f       	sbci	r27, 0xFF	; 255
 1fa:	6c 01       	movw	r12, r24
 1fc:	7d 01       	movw	r14, r26
 1fe:	c2 1a       	sub	r12, r18
 200:	d3 0a       	sbc	r13, r19
 202:	e4 0a       	sbc	r14, r20
 204:	f5 0a       	sbc	r15, r21
	((year + 4800 - ((14 - month) / 12)) / 4) -
	((year + 4800 - ((14 - month) / 12)) / 100) +
	((year + 4800 - ((14 - month) / 12)) / 400)  - 32045) % 7;
	return JMD;
 206:	da 01       	movw	r26, r20
 208:	c9 01       	movw	r24, r18
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	aa 1f       	adc	r26, r26
 210:	bb 1f       	adc	r27, r27
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	a4 1f       	adc	r26, r20
 218:	b5 1f       	adc	r27, r21
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	aa 1f       	adc	r26, r26
 220:	bb 1f       	adc	r27, r27
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	84 0d       	add	r24, r4
 22c:	95 1d       	adc	r25, r5
 22e:	a6 1d       	adc	r26, r6
 230:	b7 1d       	adc	r27, r7
 232:	9c 01       	movw	r18, r24
 234:	ad 01       	movw	r20, r26
 236:	23 50       	subi	r18, 0x03	; 3
 238:	31 09       	sbc	r19, r1
 23a:	41 09       	sbc	r20, r1
 23c:	51 09       	sbc	r21, r1
 23e:	a9 e9       	ldi	r26, 0x99	; 153
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__muluhisi3>
 246:	6e 5f       	subi	r22, 0xFE	; 254
 248:	7f 4f       	sbci	r23, 0xFF	; 255
 24a:	8f 4f       	sbci	r24, 0xFF	; 255
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	25 e0       	ldi	r18, 0x05	; 5
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 25a:	82 0e       	add	r8, r18
 25c:	93 1e       	adc	r9, r19
 25e:	a4 1e       	adc	r10, r20
 260:	b5 1e       	adc	r11, r21
 262:	ad e6       	ldi	r26, 0x6D	; 109
 264:	b1 e0       	ldi	r27, 0x01	; 1
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__muluhisi3>
 26e:	86 0e       	add	r8, r22
 270:	97 1e       	adc	r9, r23
 272:	a8 1e       	adc	r10, r24
 274:	b9 1e       	adc	r11, r25
 276:	d7 01       	movw	r26, r14
 278:	c6 01       	movw	r24, r12
 27a:	ff 20       	and	r15, r15
 27c:	1c f4       	brge	.+6      	; 0x284 <_Z7get_daylll+0xda>
 27e:	03 96       	adiw	r24, 0x03	; 3
 280:	a1 1d       	adc	r26, r1
 282:	b1 1d       	adc	r27, r1
 284:	b5 95       	asr	r27
 286:	a7 95       	ror	r26
 288:	97 95       	ror	r25
 28a:	87 95       	ror	r24
 28c:	b5 95       	asr	r27
 28e:	a7 95       	ror	r26
 290:	97 95       	ror	r25
 292:	87 95       	ror	r24
 294:	88 0e       	add	r8, r24
 296:	99 1e       	adc	r9, r25
 298:	aa 1e       	adc	r10, r26
 29a:	bb 1e       	adc	r11, r27
 29c:	c7 01       	movw	r24, r14
 29e:	b6 01       	movw	r22, r12
 2a0:	24 e6       	ldi	r18, 0x64	; 100
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 2ac:	82 1a       	sub	r8, r18
 2ae:	93 0a       	sbc	r9, r19
 2b0:	a4 0a       	sbc	r10, r20
 2b2:	b5 0a       	sbc	r11, r21
 2b4:	c7 01       	movw	r24, r14
 2b6:	b6 01       	movw	r22, r12
 2b8:	20 e9       	ldi	r18, 0x90	; 144
 2ba:	31 e0       	ldi	r19, 0x01	; 1
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 2c4:	d5 01       	movw	r26, r10
 2c6:	c4 01       	movw	r24, r8
 2c8:	82 0f       	add	r24, r18
 2ca:	93 1f       	adc	r25, r19
 2cc:	a4 1f       	adc	r26, r20
 2ce:	b5 1f       	adc	r27, r21
 2d0:	bc 01       	movw	r22, r24
 2d2:	cd 01       	movw	r24, r26
 2d4:	6d 52       	subi	r22, 0x2D	; 45
 2d6:	7d 47       	sbci	r23, 0x7D	; 125
 2d8:	81 09       	sbc	r24, r1
 2da:	91 09       	sbc	r25, r1
 2dc:	27 e0       	ldi	r18, 0x07	; 7
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
}
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	df 90       	pop	r13
 2f2:	cf 90       	pop	r12
 2f4:	bf 90       	pop	r11
 2f6:	af 90       	pop	r10
 2f8:	9f 90       	pop	r9
 2fa:	8f 90       	pop	r8
 2fc:	7f 90       	pop	r7
 2fe:	6f 90       	pop	r6
 300:	5f 90       	pop	r5
 302:	4f 90       	pop	r4
 304:	08 95       	ret

00000306 <_Z4datellll>:

void date(long day,long month,long year,long dem)
{
 306:	4f 92       	push	r4
 308:	5f 92       	push	r5
 30a:	6f 92       	push	r6
 30c:	7f 92       	push	r7
 30e:	8f 92       	push	r8
 310:	9f 92       	push	r9
 312:	af 92       	push	r10
 314:	bf 92       	push	r11
 316:	cf 92       	push	r12
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	e6 97       	sbiw	r28, 0x36	; 54
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	6b ab       	std	Y+51, r22	; 0x33
 338:	7c ab       	std	Y+52, r23	; 0x34
 33a:	8d ab       	std	Y+53, r24	; 0x35
 33c:	9e ab       	std	Y+54, r25	; 0x36
 33e:	29 01       	movw	r4, r18
 340:	3a 01       	movw	r6, r20
 342:	47 01       	movw	r8, r14
 344:	58 01       	movw	r10, r16
	char d[10],m[20],y[20];
	long  a=get_day(day,month,year);
 346:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Z7get_daylll>
 34a:	6b 01       	movw	r12, r22
 34c:	7c 01       	movw	r14, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 34e:	4a e0       	ldi	r20, 0x0A	; 10
 350:	be 01       	movw	r22, r28
 352:	6f 5f       	subi	r22, 0xFF	; 255
 354:	7f 4f       	sbci	r23, 0xFF	; 255
 356:	8b a9       	ldd	r24, Y+51	; 0x33
 358:	9c a9       	ldd	r25, Y+52	; 0x34
 35a:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
 35e:	4a e0       	ldi	r20, 0x0A	; 10
 360:	be 01       	movw	r22, r28
 362:	65 5f       	subi	r22, 0xF5	; 245
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	c2 01       	movw	r24, r4
 368:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
 36c:	4a e0       	ldi	r20, 0x0A	; 10
 36e:	be 01       	movw	r22, r28
 370:	61 5e       	subi	r22, 0xE1	; 225
 372:	7f 4f       	sbci	r23, 0xFF	; 255
 374:	c4 01       	movw	r24, r8
 376:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
	itoa(day,d,10);
	itoa(month,m,10);
	itoa(year,y,10);
	print_LCD((char*)"  ");
 37a:	8a eb       	ldi	r24, 0xBA	; 186
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(d);
 382:	ce 01       	movw	r24, r28
 384:	01 96       	adiw	r24, 0x01	; 1
 386:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD((char*)"-");
 38a:	86 eb       	ldi	r24, 0xB6	; 182
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(m);
 392:	ce 01       	movw	r24, r28
 394:	0b 96       	adiw	r24, 0x0b	; 11
 396:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD((char*)"-");
 39a:	86 eb       	ldi	r24, 0xB6	; 182
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(y);
 3a2:	ce 01       	movw	r24, r28
 3a4:	4f 96       	adiw	r24, 0x1f	; 31
 3a6:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD((char*)" ");	
 3aa:	8b eb       	ldi	r24, 0xBB	; 187
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(thu[a]);
 3b2:	c6 01       	movw	r24, r12
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	cc 0c       	add	r12, r12
 3ba:	dd 1c       	adc	r13, r13
 3bc:	cc 0c       	add	r12, r12
 3be:	dd 1c       	adc	r13, r13
 3c0:	cc 0c       	add	r12, r12
 3c2:	dd 1c       	adc	r13, r13
 3c4:	8c 0d       	add	r24, r12
 3c6:	9d 1d       	adc	r25, r13
 3c8:	80 59       	subi	r24, 0x90	; 144
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>

}
 3d0:	e6 96       	adiw	r28, 0x36	; 54
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	f8 94       	cli
 3d6:	de bf       	out	0x3e, r29	; 62
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	cd bf       	out	0x3d, r28	; 61
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	df 90       	pop	r13
 3ea:	cf 90       	pop	r12
 3ec:	bf 90       	pop	r11
 3ee:	af 90       	pop	r10
 3f0:	9f 90       	pop	r9
 3f2:	8f 90       	pop	r8
 3f4:	7f 90       	pop	r7
 3f6:	6f 90       	pop	r6
 3f8:	5f 90       	pop	r5
 3fa:	4f 90       	pop	r4
 3fc:	08 95       	ret

000003fe <_Z4timeiii>:
void time(int x,int y,int z)
{
 3fe:	cf 92       	push	r12
 400:	df 92       	push	r13
 402:	ef 92       	push	r14
 404:	ff 92       	push	r15
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	e0 97       	sbiw	r28, 0x30	; 48
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
 41e:	6c 01       	movw	r12, r24
 420:	7b 01       	movw	r14, r22
 422:	8a 01       	movw	r16, r20
	char gio[16],phut[16],giay[16];
	home_LCD();
 424:	0e 94 9f 00 	call	0x13e	; 0x13e <_Z8home_LCDv>
 428:	4a e0       	ldi	r20, 0x0A	; 10
 42a:	be 01       	movw	r22, r28
 42c:	6f 5f       	subi	r22, 0xFF	; 255
 42e:	7f 4f       	sbci	r23, 0xFF	; 255
 430:	c6 01       	movw	r24, r12
 432:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
 436:	4a e0       	ldi	r20, 0x0A	; 10
 438:	be 01       	movw	r22, r28
 43a:	6f 5e       	subi	r22, 0xEF	; 239
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	c7 01       	movw	r24, r14
 440:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
 444:	4a e0       	ldi	r20, 0x0A	; 10
 446:	be 01       	movw	r22, r28
 448:	6f 5d       	subi	r22, 0xDF	; 223
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	c8 01       	movw	r24, r16
 44e:	0e 94 b6 03 	call	0x76c	; 0x76c <__itoa_ncheck>
	itoa(x,gio,10);
	itoa(y,phut,10);
	itoa(z,giay,10);
	print_LCD((char*)"    ");
 452:	88 eb       	ldi	r24, 0xB8	; 184
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(gio);
 45a:	ce 01       	movw	r24, r28
 45c:	01 96       	adiw	r24, 0x01	; 1
 45e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD((char*)":");
 462:	8d eb       	ldi	r24, 0xBD	; 189
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(phut);
 46a:	ce 01       	movw	r24, r28
 46c:	41 96       	adiw	r24, 0x11	; 17
 46e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD((char*)":");
 472:	8d eb       	ldi	r24, 0xBD	; 189
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>
	print_LCD(giay);
 47a:	ce 01       	movw	r24, r28
 47c:	81 96       	adiw	r24, 0x21	; 33
 47e:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z9print_LCDPc>

}
 482:	e0 96       	adiw	r28, 0x30	; 48
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	df 90       	pop	r13
 49c:	cf 90       	pop	r12
 49e:	08 95       	ret

000004a0 <main>:
int gio=21,phut=35,giay=00;
long dem=0, day=5,month=8,year=2020;

int main(void)
{
	init_LCD();
 4a0:	0e 94 82 00 	call	0x104	; 0x104 <_Z8init_LCDv>
	clr_LCD();
 4a4:	0e 94 b2 00 	call	0x164	; 0x164 <_Z7clr_LCDv>
	TCCR0=0x03;
 4a8:	83 e0       	ldi	r24, 0x03	; 3
 4aa:	83 bf       	out	0x33, r24	; 51
	TCNT0=130;
 4ac:	82 e8       	ldi	r24, 0x82	; 130
 4ae:	82 bf       	out	0x32, r24	; 50
	TIMSK=0x01;
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	89 bf       	out	0x39, r24	; 57
	sei();
 4b4:	78 94       	sei
	
    while (1) 
    {	
			time(gio,phut,giay);
 4b6:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 4ba:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 4be:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 4c2:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 4c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 4ca:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 4ce:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
			move_LCD(2,1);
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	82 e0       	ldi	r24, 0x02	; 2
 4d6:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z8move_LCDhh>
			date(day,month,year,dem);
 4da:	a0 90 c0 00 	lds	r10, 0x00C0	; 0x8000c0 <__data_end>
 4de:	b0 90 c1 00 	lds	r11, 0x00C1	; 0x8000c1 <__data_end+0x1>
 4e2:	c0 90 c2 00 	lds	r12, 0x00C2	; 0x8000c2 <__data_end+0x2>
 4e6:	d0 90 c3 00 	lds	r13, 0x00C3	; 0x8000c3 <__data_end+0x3>
 4ea:	e0 90 60 00 	lds	r14, 0x0060	; 0x800060 <__data_start>
 4ee:	f0 90 61 00 	lds	r15, 0x0061	; 0x800061 <__data_start+0x1>
 4f2:	00 91 62 00 	lds	r16, 0x0062	; 0x800062 <__data_start+0x2>
 4f6:	10 91 63 00 	lds	r17, 0x0063	; 0x800063 <__data_start+0x3>
 4fa:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <month>
 4fe:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <month+0x1>
 502:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <month+0x2>
 506:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <month+0x3>
 50a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <day>
 50e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <day+0x1>
 512:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <day+0x2>
 516:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <day+0x3>
 51a:	0e 94 83 01 	call	0x306	; 0x306 <_Z4datellll>
			if(dem>=1000)
 51e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
 522:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x1>
 526:	a0 91 c2 00 	lds	r26, 0x00C2	; 0x8000c2 <__data_end+0x2>
 52a:	b0 91 c3 00 	lds	r27, 0x00C3	; 0x8000c3 <__data_end+0x3>
 52e:	88 3e       	cpi	r24, 0xE8	; 232
 530:	93 40       	sbci	r25, 0x03	; 3
 532:	a1 05       	cpc	r26, r1
 534:	b1 05       	cpc	r27, r1
 536:	0c f4       	brge	.+2      	; 0x53a <main+0x9a>
 538:	be cf       	rjmp	.-132    	; 0x4b6 <main+0x16>
			{
				giay++;
 53a:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 53e:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 542:	4f 5f       	subi	r20, 0xFF	; 255
 544:	5f 4f       	sbci	r21, 0xFF	; 255
 546:	50 93 c5 00 	sts	0x00C5, r21	; 0x8000c5 <giay+0x1>
 54a:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <giay>
				if(giay<60)
 54e:	4c 33       	cpi	r20, 0x3C	; 60
 550:	51 05       	cpc	r21, r1
 552:	5c f4       	brge	.+22     	; 0x56a <main+0xca>
				{
					time(gio,phut,giay);
 554:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 558:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 55c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 560:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 564:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
 568:	5f c0       	rjmp	.+190    	; 0x628 <main+0x188>
				}
				else
				{
					giay=0;
 56a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <giay+0x1>
 56e:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <giay>
					time(gio,phut,giay);
 572:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 576:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 582:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 586:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
					phut++;
 58a:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 58e:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <phut+0x1>
 59a:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <phut>
					if(phut<60)
 59e:	6c 33       	cpi	r22, 0x3C	; 60
 5a0:	71 05       	cpc	r23, r1
 5a2:	5c f4       	brge	.+22     	; 0x5ba <main+0x11a>
					{
						time(gio,phut,giay);
 5a4:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 5a8:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 5ac:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 5b0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 5b4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
 5b8:	37 c0       	rjmp	.+110    	; 0x628 <main+0x188>
					}
					else
					{
						phut=0;
 5ba:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <phut+0x1>
 5be:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <phut>
						time(gio,phut,giay);
 5c2:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 5c6:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	70 e0       	ldi	r23, 0x00	; 0
 5ce:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 5d2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 5d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
						gio++;
 5da:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 5de:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <gio+0x1>
 5e8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <gio>
						if(gio<24)
 5ec:	88 31       	cpi	r24, 0x18	; 24
 5ee:	91 05       	cpc	r25, r1
 5f0:	5c f4       	brge	.+22     	; 0x608 <main+0x168>
						{
							time(gio,phut,giay);
 5f2:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 5f6:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 5fa:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 5fe:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 602:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
 606:	10 c0       	rjmp	.+32     	; 0x628 <main+0x188>
						}
						else
						{
							gio=0;
 608:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <gio+0x1>
 60c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <gio>
							time(gio,phut,giay);
 610:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 614:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 618:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 61c:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
						}
					}
				}
				time(gio,phut,giay);
 628:	40 91 c4 00 	lds	r20, 0x00C4	; 0x8000c4 <giay>
 62c:	50 91 c5 00 	lds	r21, 0x00C5	; 0x8000c5 <giay+0x1>
 630:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <phut>
 634:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <phut+0x1>
 638:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <gio>
 63c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <gio+0x1>
 640:	0e 94 ff 01 	call	0x3fe	; 0x3fe <_Z4timeiii>
				dem=0;
 644:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__data_end>
 648:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__data_end+0x1>
 64c:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <__data_end+0x2>
 650:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <__data_end+0x3>
				if(giay==0) clr_LCD();
 654:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <giay>
 658:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <giay+0x1>
 65c:	89 2b       	or	r24, r25
 65e:	09 f0       	breq	.+2      	; 0x662 <main+0x1c2>
 660:	2a cf       	rjmp	.-428    	; 0x4b6 <main+0x16>
 662:	0e 94 b2 00 	call	0x164	; 0x164 <_Z7clr_LCDv>
 666:	27 cf       	rjmp	.-434    	; 0x4b6 <main+0x16>

00000668 <__vector_9>:
			}
	}
}

ISR(TIMER0_OVF_vect)
{
 668:	1f 92       	push	r1
 66a:	0f 92       	push	r0
 66c:	0f b6       	in	r0, 0x3f	; 63
 66e:	0f 92       	push	r0
 670:	11 24       	eor	r1, r1
 672:	8f 93       	push	r24
 674:	9f 93       	push	r25
 676:	af 93       	push	r26
 678:	bf 93       	push	r27
	TCNT0=130;
 67a:	82 e8       	ldi	r24, 0x82	; 130
 67c:	82 bf       	out	0x32, r24	; 50
	dem++;
 67e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__data_end>
 682:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__data_end+0x1>
 686:	a0 91 c2 00 	lds	r26, 0x00C2	; 0x8000c2 <__data_end+0x2>
 68a:	b0 91 c3 00 	lds	r27, 0x00C3	; 0x8000c3 <__data_end+0x3>
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	a1 1d       	adc	r26, r1
 692:	b1 1d       	adc	r27, r1
 694:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__data_end>
 698:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__data_end+0x1>
 69c:	a0 93 c2 00 	sts	0x00C2, r26	; 0x8000c2 <__data_end+0x2>
 6a0:	b0 93 c3 00 	sts	0x00C3, r27	; 0x8000c3 <__data_end+0x3>
}
 6a4:	bf 91       	pop	r27
 6a6:	af 91       	pop	r26
 6a8:	9f 91       	pop	r25
 6aa:	8f 91       	pop	r24
 6ac:	0f 90       	pop	r0
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	0f 90       	pop	r0
 6b2:	1f 90       	pop	r1
 6b4:	18 95       	reti

000006b6 <__divmodsi4>:
 6b6:	05 2e       	mov	r0, r21
 6b8:	97 fb       	bst	r25, 7
 6ba:	1e f4       	brtc	.+6      	; 0x6c2 <__divmodsi4+0xc>
 6bc:	00 94       	com	r0
 6be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__negsi2>
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	07 d0       	rcall	.+14     	; 0x6d4 <__divmodsi4_neg2>
 6c6:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 6ca:	07 fc       	sbrc	r0, 7
 6cc:	03 d0       	rcall	.+6      	; 0x6d4 <__divmodsi4_neg2>
 6ce:	4e f4       	brtc	.+18     	; 0x6e2 <__divmodsi4_exit>
 6d0:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__negsi2>

000006d4 <__divmodsi4_neg2>:
 6d4:	50 95       	com	r21
 6d6:	40 95       	com	r20
 6d8:	30 95       	com	r19
 6da:	21 95       	neg	r18
 6dc:	3f 4f       	sbci	r19, 0xFF	; 255
 6de:	4f 4f       	sbci	r20, 0xFF	; 255
 6e0:	5f 4f       	sbci	r21, 0xFF	; 255

000006e2 <__divmodsi4_exit>:
 6e2:	08 95       	ret

000006e4 <__negsi2>:
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__muluhisi3>:
 6f4:	0e 94 a7 03 	call	0x74e	; 0x74e <__umulhisi3>
 6f8:	a5 9f       	mul	r26, r21
 6fa:	90 0d       	add	r25, r0
 6fc:	b4 9f       	mul	r27, r20
 6fe:	90 0d       	add	r25, r0
 700:	a4 9f       	mul	r26, r20
 702:	80 0d       	add	r24, r0
 704:	91 1d       	adc	r25, r1
 706:	11 24       	eor	r1, r1
 708:	08 95       	ret

0000070a <__udivmodsi4>:
 70a:	a1 e2       	ldi	r26, 0x21	; 33
 70c:	1a 2e       	mov	r1, r26
 70e:	aa 1b       	sub	r26, r26
 710:	bb 1b       	sub	r27, r27
 712:	fd 01       	movw	r30, r26
 714:	0d c0       	rjmp	.+26     	; 0x730 <__udivmodsi4_ep>

00000716 <__udivmodsi4_loop>:
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ee 1f       	adc	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	a2 17       	cp	r26, r18
 720:	b3 07       	cpc	r27, r19
 722:	e4 07       	cpc	r30, r20
 724:	f5 07       	cpc	r31, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__udivmodsi4_ep>
 728:	a2 1b       	sub	r26, r18
 72a:	b3 0b       	sbc	r27, r19
 72c:	e4 0b       	sbc	r30, r20
 72e:	f5 0b       	sbc	r31, r21

00000730 <__udivmodsi4_ep>:
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	1a 94       	dec	r1
 73a:	69 f7       	brne	.-38     	; 0x716 <__udivmodsi4_loop>
 73c:	60 95       	com	r22
 73e:	70 95       	com	r23
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	9b 01       	movw	r18, r22
 746:	ac 01       	movw	r20, r24
 748:	bd 01       	movw	r22, r26
 74a:	cf 01       	movw	r24, r30
 74c:	08 95       	ret

0000074e <__umulhisi3>:
 74e:	a2 9f       	mul	r26, r18
 750:	b0 01       	movw	r22, r0
 752:	b3 9f       	mul	r27, r19
 754:	c0 01       	movw	r24, r0
 756:	a3 9f       	mul	r26, r19
 758:	70 0d       	add	r23, r0
 75a:	81 1d       	adc	r24, r1
 75c:	11 24       	eor	r1, r1
 75e:	91 1d       	adc	r25, r1
 760:	b2 9f       	mul	r27, r18
 762:	70 0d       	add	r23, r0
 764:	81 1d       	adc	r24, r1
 766:	11 24       	eor	r1, r1
 768:	91 1d       	adc	r25, r1
 76a:	08 95       	ret

0000076c <__itoa_ncheck>:
 76c:	bb 27       	eor	r27, r27
 76e:	4a 30       	cpi	r20, 0x0A	; 10
 770:	31 f4       	brne	.+12     	; 0x77e <__itoa_ncheck+0x12>
 772:	99 23       	and	r25, r25
 774:	22 f4       	brpl	.+8      	; 0x77e <__itoa_ncheck+0x12>
 776:	bd e2       	ldi	r27, 0x2D	; 45
 778:	90 95       	com	r25
 77a:	81 95       	neg	r24
 77c:	9f 4f       	sbci	r25, 0xFF	; 255
 77e:	0c 94 c2 03 	jmp	0x784	; 0x784 <__utoa_common>

00000782 <__utoa_ncheck>:
 782:	bb 27       	eor	r27, r27

00000784 <__utoa_common>:
 784:	fb 01       	movw	r30, r22
 786:	55 27       	eor	r21, r21
 788:	aa 27       	eor	r26, r26
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	aa 1f       	adc	r26, r26
 790:	a4 17       	cp	r26, r20
 792:	10 f0       	brcs	.+4      	; 0x798 <__utoa_common+0x14>
 794:	a4 1b       	sub	r26, r20
 796:	83 95       	inc	r24
 798:	50 51       	subi	r21, 0x10	; 16
 79a:	b9 f7       	brne	.-18     	; 0x78a <__utoa_common+0x6>
 79c:	a0 5d       	subi	r26, 0xD0	; 208
 79e:	aa 33       	cpi	r26, 0x3A	; 58
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <__utoa_common+0x20>
 7a2:	a9 5d       	subi	r26, 0xD9	; 217
 7a4:	a1 93       	st	Z+, r26
 7a6:	00 97       	sbiw	r24, 0x00	; 0
 7a8:	79 f7       	brne	.-34     	; 0x788 <__utoa_common+0x4>
 7aa:	b1 11       	cpse	r27, r1
 7ac:	b1 93       	st	Z+, r27
 7ae:	11 92       	st	Z+, r1
 7b0:	cb 01       	movw	r24, r22
 7b2:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <strrev>

000007b6 <strrev>:
 7b6:	dc 01       	movw	r26, r24
 7b8:	fc 01       	movw	r30, r24
 7ba:	67 2f       	mov	r22, r23
 7bc:	71 91       	ld	r23, Z+
 7be:	77 23       	and	r23, r23
 7c0:	e1 f7       	brne	.-8      	; 0x7ba <strrev+0x4>
 7c2:	32 97       	sbiw	r30, 0x02	; 2
 7c4:	04 c0       	rjmp	.+8      	; 0x7ce <strrev+0x18>
 7c6:	7c 91       	ld	r23, X
 7c8:	6d 93       	st	X+, r22
 7ca:	70 83       	st	Z, r23
 7cc:	62 91       	ld	r22, -Z
 7ce:	ae 17       	cp	r26, r30
 7d0:	bf 07       	cpc	r27, r31
 7d2:	c8 f3       	brcs	.-14     	; 0x7c6 <strrev+0x10>
 7d4:	08 95       	ret

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
